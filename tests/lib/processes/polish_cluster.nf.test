nextflow_process {

    name "Test Process POLISH_CLUSTER"
    script "lib/processes/polish_cluster.nf"
    process "POLISH_CLUSTER"

        setup{
            run("CLUSTER"){
                script "$baseDir/lib/processes/cluster.nf"
                process {
                    """
                    input[0] = Channel.of(
                        ["barcode03", "raw", "$baseDir/tests/input/cluster/barcode03/detected_umis.fastq"],
                        ["barcode04", "raw", "$baseDir/tests/input/cluster/barcode04/detected_umis.fastq"],
                        ["barcode05", "raw", "$baseDir/tests/input/cluster/barcode05/detected_umis.fastq"],
                        ["barcode06", "raw", "$baseDir/tests/input/cluster/barcode06/detected_umis.fastq"],
                        ["barcode07", "raw", "$baseDir/tests/input/cluster/barcode07/detected_umis.fastq"]
                    )
                    input[1] = "raw"
                    """
                }
            }
            run("REFORMAT_FILTER_CLUSTER"){
                script "$baseDir/lib/processes/reformat_filter_cluster.nf"
                params{
                    min_reads_per_cluster = 10
                }
                process {
                    """
                    input[0] = CLUSTER.out.cluster_fastas
                    input[1] = "raw"
                    input[2] = file("$baseDir/bin/parse_clusters.py")
                    """
                }
            }
        }


    test("Should run without failures") {
        when {
            process {
                """
                input[0] = REFORMAT_FILTER_CLUSTER.out.smolecule_cluster_fastqs.transpose()
                input[1] = "Consensus"
                """
            }
        }

        then {
            assert process.success
            assert snapshot(process.out).match()
        }

    }

}
