nextflow_process {

    name "Test Process POLISH_CLUSTER"
    script "modules/local/umi_polishing/polish_cluster.nf"
    process "POLISH_CLUSTER"

        setup{
            run("GLUE_CLUSTERS"){
                script "modules/local/umi_polishing/glue_clusters.nf"
                params{
                    min_reads_per_cluster = 10
                }
                process {
                    """
                    input[0] = Channel.of(
                        ["barcode03", "LPA2645", "$baseDir/tests/input/polish_cluster/single_clusters/smolecule0_sub0.fastq"],
                        ["barcode03", "LPA2645", "$baseDir/tests/input/polish_cluster/single_clusters/smolecule1_sub0.fastq"],
                        ["barcode03", "LPA2645", "$baseDir/tests/input/polish_cluster/single_clusters/smolecule2_sub0.fastq"],
                        ["barcode03", "LPA2645", "$baseDir/tests/input/polish_cluster/single_clusters/smolecule3_sub0.fastq"],
                        ["barcode03", "LPA2645", "$baseDir/tests/input/polish_cluster/single_clusters/smolecule4_sub0.fastq"]
                    )
                    input[1] = "raw"
                    """
                }
            }

        }

    test("Should run without failures - one sample per file") {
        when {
            process {
                """
                    input[0] = Channel.of(
                        ["barcode03", "LPA2645", "$baseDir/tests/input/polish_cluster/single_clusters/smolecule0_sub0.fastq"],
                        ["barcode03", "LPA2645", "$baseDir/tests/input/polish_cluster/single_clusters/smolecule1_sub0.fastq"],
                        ["barcode03", "LPA2645", "$baseDir/tests/input/polish_cluster/single_clusters/smolecule2_sub0.fastq"],
                        ["barcode03", "LPA2645", "$baseDir/tests/input/polish_cluster/single_clusters/smolecule3_sub0.fastq"],
                        ["barcode03", "LPA2645", "$baseDir/tests/input/polish_cluster/single_clusters/smolecule4_sub0.fastq"]
                    )
                    input[1] = "consensus"
                """
            }
        }

        then {
            assert process.success
            assert snapshot(process.out.consensus_fastq).match()
        }

    }

    test("Should run without failures - multiple samples per file") {
        when {
            process {
                """
                    input[0] = Channel.of(
                        ["barcode03", "LPA2645", "$baseDir/tests/input/polish_cluster/glued_clusters/barcode03_combined_clusters_1.fastq"]
                    )
                    input[1] = "consensus"
                """
            }
        }

        then {
            assert process.success
            def fastqFile = path(process.out.consensus_fastq.get(0).get(2)).fastq
            assert fastqFile.getNumberOfRecords() == 6
        }

    }

    test("Should run without failures") {
        when {
            process {
                """
                input[0] = GLUE_CLUSTERS.out.glued_clusters
                            .map{ sample, type, clusters -> tuple(sample, type, clusters instanceof List ? clusters : [clusters]) }
                            .transpose(by: 2)
                input[1] = "consensus"
                """
            }
        }

        then {
            assert process.success 
            assert snapshot(process.out.consensus_fastq).match()
        }

    }

}
