nextflow_process {

    name "Test Process DETECT_UMI_FASTQ"
    script "modules/local/umi_processing/detect_umi_fastq.nf"
    process "DETECT_UMI_FASTQ"

    test("Should run without failures") {

        when {
            params{
                use_context = false
            }
            process {
                """
                input[0] = Channel.of(
                    ["barcode02", "raw", "$baseDir/tests/input/detect_umi/barcode02/lpa2645_filtered.fastq"],
                    ["barcode03", "raw", "$baseDir/tests/input/detect_umi/barcode03/lpa2645_filtered.fastq"],
                    ["barcode04", "raw", "$baseDir/tests/input/detect_umi/barcode04/lpa2645_filtered.fastq"],
                    ["barcode05", "raw", "$baseDir/tests/input/detect_umi/barcode05/lpa2645_filtered.fastq"],
                )
                input[1] = file( "$baseDir/.nf-test/tests/")
                input[2] = "raw"
                input[3] = file("$baseDir/bin/extract_umis.py")
                """
            }
        }

        then {
            assert process.success
            assert snapshot(process.out).match()
        }

    }
    test("Should detect the same UMIs - short adapter") {

        when {
            params{
                adapter_length = 50
                use_context = false
            }
            process {
                """
                input[0] = Channel.of(
                    ["barcode02", "lpa2645", "$baseDir/tests/input/detect_umi/barcode02/lpa2645_filtered.fastq"],
                    ["barcode03", "lpa2645", "$baseDir/tests/input/detect_umi/barcode03/lpa2645_filtered.fastq"],
                    ["barcode04", "lpa2645", "$baseDir/tests/input/detect_umi/barcode04/lpa2645_filtered.fastq"],
                    ["barcode05", "lpa2645", "$baseDir/tests/input/detect_umi/barcode05/lpa2645_filtered.fastq"],
                )
                input[1] = file( "$baseDir/.nf-test/tests/")
                input[2] = "raw"
                input[3] = file("$baseDir/bin/extract_umis.py")
                """
            }
        }

        then {
            assert process.success
            assert snapshot(process.out).match()
            with(process.out.umi_extract_fastq){
                assert path(get(0).get(2)).md5 == "d41d8cd98f00b204e9800998ecf8427e"
                assert path(get(1).get(2)).md5 == "ef06dacd82cc76a3e1797fafed348d97"
                assert path(get(2).get(2)).md5 == "75c1c38a134cf1270f5e94d3ea938006"
                assert path(get(3).get(2)).md5 == "fe23b244bdfdfe5f62e2488c6acff007"
            }
        }

    }

    test("Should detect the same UMIs - long adapter") {

        when {
            params{
                adapter_length = 500
                use_context = false
            }
            process {
                """
                input[0] = Channel.of(
                    ["barcode02", "lpa2645", "$baseDir/tests/input/detect_umi/barcode02/lpa2645_filtered.fastq"],
                    ["barcode03", "lpa2645", "$baseDir/tests/input/detect_umi/barcode03/lpa2645_filtered.fastq"],
                    ["barcode04", "lpa2645", "$baseDir/tests/input/detect_umi/barcode04/lpa2645_filtered.fastq"],
                    ["barcode05", "lpa2645", "$baseDir/tests/input/detect_umi/barcode05/lpa2645_filtered.fastq"],
                )
                input[1] = file( "$baseDir/.nf-test/tests/")
                input[2] = "raw"
                input[3] = file("$baseDir/bin/extract_umis.py")
                """
            }
        }

        then {
            assert process.success
            assert snapshot(process.out).match()
            with(process.out.umi_extract_fastq){
                assert path(get(0).get(2)).md5 == "d41d8cd98f00b204e9800998ecf8427e"
                assert path(get(1).get(2)).md5 == "ef06dacd82cc76a3e1797fafed348d97"
                assert path(get(2).get(2)).md5 == "75c1c38a134cf1270f5e94d3ea938006"
                assert path(get(3).get(2)).md5 == "fe23b244bdfdfe5f62e2488c6acff007"
            }
        }

    }

    test("Should detect UMIs") {

        when {
            params{
                adapter_length = 250
            }
            process {
                """
                input[0] = Channel.of(
                    ["barcode_context", "lpa2645", "$baseDir/tests/input/detect_umi/barcode_context/lpa2645_filtered.fastq"],
                )
                input[1] = file( "$baseDir/.nf-test/tests/")
                input[2] = "raw"
                input[3] = file("$baseDir/bin/extract_umis.py")
                """
            }
        }

        then {
            assert process.success
            assert snapshot(process.out).match()
        }
    }

    test("Should detect the UMIs using context primer") {

        when {
            params{
                adapter_length = 250
                use_context = true
            }
            process {
                """
                input[0] = Channel.of(
                    ["barcode_context", "lpa2645", "$baseDir/tests/input/detect_umi/barcode_context/lpa2645_filtered.fastq"],
                )
                input[1] = file( "$baseDir/.nf-test/tests/")
                input[2] = "raw"
                input[3] = file("$baseDir/bin/extract_umis.py")
                """
            }
        }

        then {
            assert process.success
            assert snapshot(process.out).match()
            with(process.out.umi_extract_fastq){
                assert path(get(0).get(2)).md5 == "d98f53ef8fb52f5ca0cffda16e10c5b5"
            }
        }

    }

    test("Should output empty file") {

        when {
            params {
                use_context = false
            }
            process {
                """
                input[0] = Channel.of(
                    ["barcode02", "lpa2645", "$baseDir/tests/input/detect_umi/barcode02/lpa2645_filtered.fastq"],
                )
                input[1] = file( "$baseDir/.nf-test/tests/")
                input[2] = "raw"
                input[3] = file("$baseDir/bin/extract_umis.py")
                """
            }
        }

        then {
            assert process.success
            assert snapshot(process.out).match()
            with(process.out.umi_extract_fastq){
                assert path(get(0).get(2)).readLines().size() == 0
            }
        }

    }

    test("Should not find any UMI") {

        when {
            params{
                adapter_length = 20
                use_context = false
            }
            process {
                """
                input[0] = Channel.of(
                    ["barcode02", "lpa2645", "$baseDir/tests/input/detect_umi/barcode02/lpa2645_filtered.fastq"],
                    ["barcode03", "lpa2645", "$baseDir/tests/input/detect_umi/barcode03/lpa2645_filtered.fastq"],
                    ["barcode04", "lpa2645", "$baseDir/tests/input/detect_umi/barcode04/lpa2645_filtered.fastq"],
                    ["barcode05", "lpa2645", "$baseDir/tests/input/detect_umi/barcode05/lpa2645_filtered.fastq"],
                )
                input[1] = file( "$baseDir/.nf-test/tests/")
                input[2] = "raw"
                input[3] = file("$baseDir/bin/extract_umis.py")
                """
            }
        }

        then {
            assert process.success
            assert snapshot(process.out).match()
            with(process.out.umi_extract_fastq){
                assert path(get(0).get(2)).readLines().size() == 0
                assert path(get(1).get(2)).readLines().size() == 0
                assert path(get(2).get(2)).readLines().size() == 0
                assert path(get(3).get(2)).readLines().size() == 0
            }
        }

    }

}
