nextflow_process {

    name "Test Process REFORMAT_FILTER_CLUSTER"
    script "modules/local/umi_processing/reformat_filter_cluster.nf"
    process "REFORMAT_FILTER_CLUSTER"

    setup{
        run("CLUSTER"){
            script "modules/local/umi_processing/cluster.nf"
            process {
                """
                input[0] = Channel.of(
                    ["barcode03", "lpa2645", "$baseDir/tests/input/cluster/barcode03/detected_umis.fastq"],
                    ["barcode04", "lpa2645", "$baseDir/tests/input/cluster/barcode04/detected_umis.fastq"],
                    ["barcode05", "lpa2645", "$baseDir/tests/input/cluster/barcode05/detected_umis.fastq"],
                )
                input[1] = "raw"
                """
            }

        }
    }

    test("Should run with success") {

        when {
            params{
                min_reads_per_cluster = 10
            }
            process {
                """
                input[0] = CLUSTER.out.cluster_fastas
                            .map { barcode, target, clusters -> 
                                def filtered_clusters = clusters.findAll { fasta -> fasta.countFasta() >= params.min_reads_per_cluster }
                                filtered_clusters ? [barcode, target, filtered_clusters] : null
                            }
                            .filter { it != null }
                input[1] = "raw"
                input[2] = file("$baseDir/bin/parse_clusters.py")
                """
            }
        }

        then {
            assert process.success
            assert snapshot(process.out.smolecule_cluster_stats).match()
            with( process.out.smolecule_cluster_fastqs) {
                assert size() == 3
                assert get(0).get(2).size() == 6
                assert get(1).get(2).size() == 6
                assert get(2).get(2).size() == 12
            }
        }

    }

    test("Should output 24 smolecule files") {

        when {
            params{
                min_reads_per_cluster = 10
            }
            process {
                """
                input[0] = Channel.of( 
                    ["barcode03", "lpa2645_filtered", [
                        "$baseDir/tests/input/reformat_filter_cluster/barcode03/cluster0",
                        "$baseDir/tests/input/reformat_filter_cluster/barcode03/cluster1",
                        "$baseDir/tests/input/reformat_filter_cluster/barcode03/cluster2",
                        "$baseDir/tests/input/reformat_filter_cluster/barcode03/cluster3",
                        "$baseDir/tests/input/reformat_filter_cluster/barcode03/cluster4",
                        "$baseDir/tests/input/reformat_filter_cluster/barcode03/cluster5"]],
                    ["barcode04", "lpa2645_filtered", [
                        "$baseDir/tests/input/reformat_filter_cluster/barcode04/cluster0",
                        "$baseDir/tests/input/reformat_filter_cluster/barcode04/cluster1",
                        "$baseDir/tests/input/reformat_filter_cluster/barcode04/cluster2",
                        "$baseDir/tests/input/reformat_filter_cluster/barcode04/cluster3",
                        "$baseDir/tests/input/reformat_filter_cluster/barcode04/cluster4",
                        "$baseDir/tests/input/reformat_filter_cluster/barcode04/cluster5"]],
                    ["barcode05", "lpa2645_filtered", [
                        "$baseDir/tests/input/reformat_filter_cluster/barcode05/cluster0",
                        "$baseDir/tests/input/reformat_filter_cluster/barcode05/cluster1",
                        "$baseDir/tests/input/reformat_filter_cluster/barcode05/cluster2",
                        "$baseDir/tests/input/reformat_filter_cluster/barcode05/cluster3",
                        "$baseDir/tests/input/reformat_filter_cluster/barcode05/cluster4",
                        "$baseDir/tests/input/reformat_filter_cluster/barcode05/cluster5",
                        "$baseDir/tests/input/reformat_filter_cluster/barcode05/cluster6",
                        "$baseDir/tests/input/reformat_filter_cluster/barcode05/cluster7",
                        "$baseDir/tests/input/reformat_filter_cluster/barcode05/cluster8",
                        "$baseDir/tests/input/reformat_filter_cluster/barcode05/cluster9",
                        "$baseDir/tests/input/reformat_filter_cluster/barcode05/cluster10",
                        "$baseDir/tests/input/reformat_filter_cluster/barcode05/cluster11"]],
                    )
                input[1] = "raw"
                input[2] = file("$baseDir/bin/parse_clusters.py")
                """
            }
        }

        then {
            assert process.success
            assert snapshot(process.out).match()
        }

    }

    test("Should split cluster into 6 smolecule files") {

        when {
            params{
                min_reads_per_cluster = 10
            }
            process {
                """
                input[0] = Channel.of(["barcode06", "raw", "$baseDir/tests/input/reformat_filter_cluster/barcode06/cluster0"])
                input[1] = Channel.of("raw")
                input[2] = file( "$baseDir/bin/parse_clusters.py")
                """
            }
        }

        then {
            assert process.success
            assert snapshot(process.out).match()
        }

    }

    test("Should split cluster into 3 smolecule files") {

        when {
            params{
                min_reads_per_cluster = 20
            }
            process {
                """
                input[0] = Channel.of(["barcode06", "raw", "$baseDir/tests/input/reformat_filter_cluster/barcode06/cluster0"])
                input[1] = Channel.of("raw")
                input[2] = file( "$baseDir/bin/parse_clusters.py")
                """
            }
        }

        then {
            assert process.success
            assert snapshot(process.out).match()
        }

    }

    test("Should have no output") {

        when {
            params{
                min_reads_per_cluster = 100
            }
            process {
                """
                input[0] = Channel.of(["barcode06", "raw", "$baseDir/tests/input/reformat_filter_cluster/barcode06/cluster0"])
                input[1] = Channel.of("raw")
                input[2] = file( "$baseDir/bin/parse_clusters.py", checkIfExists: true)
                """
            }
        }

        then {
            assert process.success
            assert snapshot(process.out).match()
        }

    }

}
