nextflow_pipeline {

    name "Test Workflow main.nf"
    script "main.nf"

    test("Should execute umi-pipeline-nf - POA-based") {

        when {

            params {
                input 			            = "$baseDir/tests/input/pipeline/fastq_pass/"
                output 			            = "test_umi-pipeline-nf"
                reference 		            = "$baseDir/tests/input/pipeline/ref/lpa-ref2645.fasta"
                reference_fai 	            = "$baseDir/tests/input/pipeline/ref/lpa-ref2645.fasta.fai"
                bed 			            = "$baseDir/tests/input/pipeline/ref/lpa-ref2645.bed"

                min_reads_per_cluster 	    = 10
                max_reads_per_cluster 	    = 10
                min_reads_per_barcode       = 0
                reference_based_polishing   = false
                call_variants 		        = true
                variant_caller 		        = "freebayes"
            }
        }

        then {
            assert workflow.success
        }

    }

    test("Should execute umi-pipeline-nf - reference-based") {

        when {

            params {
                input 			            = "$baseDir/tests/input/pipeline/fastq_pass/"
                output 			            = "test_umi-pipeline-nf"
                reference 		            = "$baseDir/tests/input/pipeline/ref/lpa-ref2645.fasta"
                reference_fai 	            = "$baseDir/tests/input/pipeline/ref/lpa-ref2645.fasta.fai"
                bed 			            = "$baseDir/tests/input/pipeline/ref/lpa-ref2645.bed"

                min_reads_per_cluster 	    = 10
                max_reads_per_cluster 	    = 10
                min_reads_per_barcode       = 0
                reference_based_polishing   = true
                call_variants 		        = true
                variant_caller 		        = "freebayes"
            }
        }

        then {
            assert workflow.success
        }

    }

    test("Should execute umi-pipeline-nf with one sample - reference-based") {

        when {

            params {
                input 			            = "$baseDir/tests/input/pipeline/fastq_pass/barcode06"
                output 			            = "test_umi-pipeline-nf"
                reference 		            = "$baseDir/tests/input/pipeline/ref/lpa-ref2645.fasta"
                reference_fai 	            = "$baseDir/tests/input/pipeline/ref/lpa-ref2645.fasta.fai"
                bed 			            = "$baseDir/tests/input/pipeline/ref/lpa-ref2645.bed"

                single_sample               = true
                min_reads_per_cluster 	    = 10
                max_reads_per_cluster 	    = 10
                min_reads_per_barcode       = 0
                reference_based_polishing   = true
                call_variants 		        = true
                variant_caller 		        = "freebayes"
            }
        }

        then {
            assert workflow.success
        }

    }
}